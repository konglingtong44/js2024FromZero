#!/bin/bash
yum update -y
curl -sL https://rpm.nodesource.com/setup_18.x | bash -
yum install -y nodejs git

# 写一个简单的 Node.js 服务器
mkdir -p /home/ec2-user/demo
cd /home/ec2-user/demo

cat <<EOF > index.js
const express = require('express');
const app = express();
app.use(express.json());

const visits = {};

app.post('/track', (req, res) => {
  const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
  visits[ip] = (visits[ip] || 0) + 1;
  res.json({ ip: ip, visitCount: visits[ip] });
});

app.listen(80, () => {
  console.log('Server running on port 80');
});
EOF

# 安装依赖并启动
npm init -y
npm install express

# 设置为开机自启
cat <<EOF > /etc/systemd/system/demo.service
[Unit]
Description=Demo Visitor Tracker
After=network.target

[Service]
ExecStart=/usr/bin/node /home/ec2-user/demo/index.js
Restart=always
User=ec2-user
Environment=NODE_ENV=production

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reexec
systemctl daemon-reload
systemctl enable demo
systemctl start demo





Metasploit

#!/bin/bash
yum update -y
yum install -y python3
pip3 install flask

cat > /home/ec2-user/app.py << 'EOF'
from flask import Flask, request
app = Flask(__name__)
counter = {"count": 0}

@app.route("/", methods=["POST"])
def post_data():
    counter["count"] += 1
    data = request.get_json()
    username = data.get("username", "不明")
    return f"あなたは {counter['count']} 回目のアクセスです\nユーザー名: {username}", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=80)
EOF

nohup python3 /home/ec2-user/app.py &



メリット（优点）
	•	数千の脆弱性エクスプロイト・ペイロードが標準搭載されており、対応範囲が非常に広い
	•	無料版でも機能が豊富で、教育・検証・CTF用途に最適
	•	商用版（Pro）ではGUI、自動化、レポート生成が可能で、企業利用にも対応
	•	Kali Linuxなどでの導入が容易で、学習用環境も豊富

デメリット（缺点）
	•	CLI中心の操作のため、初心者にはやや学習コストが高い
	•	誤用すると攻撃性が高いため、使用には法的リスクと倫理的配慮が必要
	•	WebアプリやAWS環境などクラウド向けには対応が限定的（非特化）

⸻

Pacu

メリット（优点）
	•	AWS環境専用に設計されており、IAM権限の過剰設定やS3公開ミスなど、クラウド特有の問題に特化
	•	各モジュールが攻撃シナリオとして整備されており、権限エスカレーションやサービス列挙も可能
	•	CLIから柔軟にモジュールを呼び出せ、スクリプトとして連携しやすい
	•	無料・オープンソースであり、導入・運用コストが低い

デメリット（缺点）
	•	Pythonベースであり、利用には最低限のプログラミング知識が求められる
	•	GUIは存在せず、全てCLI操作のため習熟に時間がかかる
	•	AWS認証情報（アクセスキー等）の準備が必須であり、誤設定リスクもある



番号
テストタイプ
目的
内容の特徴
実施例
4
パフォーマンステスト
業務要件に対する**性能（レスポンス速度など）**の確認
通常負荷下でシステムがどれくらい速く動作するかを測定する
典型的な業務シナリオを10〜100ユーザーで実行し、応答時間を測定
5
負荷テスト
高負荷下でもシステムが正常に動作するかの確認
ユーザー数や同時接続数を段階的に増やして、システムの安定性を確認
同時接続数100→200→500…と増やし、異常が発生しないかを確認
6
ボリュームテスト
大量データ処理時の性能や安定性の確認
データ件数が非常に多い場合でも、処理が正しく行えるか（例：100万件のCSV取込など）
巨大なファイルをインポート、DBに100万件登録してバッチ処理を実行
7
ストレステスト
限界を超えたときのシステムの耐久性・回復性の確認
異常な過負荷（極端なリクエスト、CPU使用率100%など）をかけて、耐性・障害時の挙動を見る
同時接続数を意図的に数千に設定し、システムが落ちるか・復旧できるかを検証




AWSTemplateFormatVersion: '2010-09-09'

JMeter：備考（修正版）

推奨TPS：300〜1000未満（構成・シナリオに依存）
単体PC＋非GUI実行＋JVMチューニングにより、HTTPベースのシンプルなシナリオでは最大1000TPS前後まで対応可能。リソース制限や複雑な処理を含む場合は、300〜500TPS程度が安定稼働の目安。高負荷が必要な場合は**分散実行（Remote Mode）**を推奨。

⸻

Gatling：備考（修正版）

推奨TPS：500〜1500程度（高性能マシン前提）
Scalaベースの軽量な実行エンジンにより、JMeterよりも高負荷処理に適している。スクリプト形式での管理が可能なため、CI/CDへの組み込みや長期的なテスト運用にも向いている。Recorder機能を除き、基本はCLIベースの操作となる。

⸻

DLTA（Distributed Load Testing on AWS）：備考

推奨TPS：1000〜5000以上（Fargateスケールによる）
AWSのスケーラブルな構成を活用することで、大規模かつ短時間の高負荷テストに最適。
費用例（参考）：
	•	ユーザー数



Description: Oddspark-style ALB (Public, Multi-AZ, Listener + TG)

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "Existing VPC ID"
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: "Public Subnet 1 (e.g. AZ-a)"
  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: "Public Subnet 2 (e.g. AZ-c)"
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: "ALB Security Group (allow HTTP/HTTPS)"

Resources:

  OddsparkTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckPath: /
      Name: oddspark-tg

  OddsparkALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: oddspark-alb
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref AlbSecurityGroup
      IpAddressType: ipv4

  OddsparkListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref OddsparkALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref OddsparkTargetGroup

Outputs:
  AlbDNS:
    Description: "ALB DNS Name"
    Value: !GetAtt OddsparkALB.DNSName





bin/bash
yum update -y
dnf install -y nginx
systemctl enable nginx
systemctl start nginx

# Write a nice English HTML page with Lambda button
cat <<EOF > /usr/share/nginx/html/index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Oddspark Demo</title>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: #f4f4f4;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
    }
    .container {
      background: white;
      padding: 30px 40px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      border-radius: 8px;
      text-align: center;
    }
    h1 {
      color: #2c3e50;
    }
    button {
      padding: 10px 20px;
      font-size: 16px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      margin-top: 15px;
    }
    button:hover {
      background: #2980b9;
    }
    #lambdaResult {
      margin-top: 20px;
      font-weight: bold;
      color: #16a085;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Welcome to the Oddspark Demo Page</h1>
    <p>This is a sample site hosted on Amazon EC2.</p>
    <button onclick="invokeLambda()">Click to invoke Lambda</button>
    <p id="lambdaResult"></p>
  </div>

  <script>
    async function invokeLambda() {
      try {
        const response = await fetch('<<API_URL>>');
        const data = await response.text();
        document.getElementById('lambdaResult').innerText = 'Lambda returned: ' + data;
      } catch (error) {
        document.getElementById('lambdaResult').innerText = 'Invocation failed: ' + error;
      }
    }
  </script>
</body>
</html>
EOF





ン
Amazon GuardDuty
AWS上の不審な挙動・脅威検出サービス
AWS全体
自動検出、CloudTrail連携
検出後の対応は手動
有料
9
GUI自動化ツール
Selenium
ブラウザ操作の自動化ツール
クライアント
多言語対応、ブラウザ対応豊富
環境構築必要、安定性課題あり
無料
10
GUI自動化ツール
Katalon Studio
SeleniumベースのGUIテストツール
クライアント
ノーコード対応
無料版に制限あり
無料・有料
11
GUI自動化ツール
TestComplete
GUIテストの商用ツール
クライアント
強力なレコーディング機能
高コスト
有料







No
ツール区分
ツール名
概要
1
ラッシュツール
JMeter
WebサイトやAPIに対して「どれくらいの人数がアクセスしても大丈夫か」を確認するための負荷テストツール。無料で使えて、複数の条件を設定して繰り返しテストできます。
2
ラッシュツール
Distributed Load Testing on AWS
AWSのサービスを使って、JMeterをクラウド上で動かしながら負荷テストができる仕組み。サーバをたくさん立てて大規模なテストも可能。使った分だけ料金がかかる。
3
ラッシュツール
Gatling
プログラムを書くような形式で負荷テストができるツール。軽くて速く、プログラムで条件管理がしやすいので、自動化に向いているが初心者には少し難しい。
4
ラッシュツール
Gatling Enterprise（有料）
Gatlingの商用バージョンで、Webの画面から操作できたり、テスト結果をわかりやすくグラフで確認できるなど、初心者にも優しい機能が追加された有料版。
5
ペネトレーション
Metasploit
ハッカーが使うような手法で、自社システムの弱点（脆弱性）を安全に検証できるツール。実際に攻撃を模擬するので、セキュリティ対策に有効。ただし専門知識が必要。
6
ペネトレーション
Pacu
AWS専用のセキュリティ診断ツールで、特に「ユーザー権限のミス」などを見つけるのに特化。AWSを使っている企業向けの、実戦的なセキュリティチェックツール。
7
ペネトレーション
Amazon Inspector
AWS上にあるサーバやアプリが、最新のセキュリティ基準に合っているかを自動でチェックしてくれる公式サービス。設定後は自動的にスキャンされる。
8
ペネトレーション
Amazon GuardDuty
AWS環境全体を監視し、不正アクセスやウイルス感染の可能性がある動きを自動で検知するサービス。特にCloudTrailやVPC Flow Logsと連携して強力になる。
9
GUI自動化ツール
Selenium
Webサイトを人間のように操作してテストするツール。例えば、「ログイン画面にIDとパスワードを入力してログインできるか」などを自動で繰り返し確認できます。
10
GUI自動化ツール
Katalon Studio
Seleniumをもっと簡単に使えるようにしたツール。画面でポチポチ操作するだけでテストが組める。無料版もあるが一部機能は有料。
11
GUI自動化ツール
TestComplete
プログラミング知識がなくても使える商用の自動テストツール。画面の操作を記録し、自動的に再現する機能が強力。使いやすいが高価。
